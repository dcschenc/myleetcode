class DSU:
    def __init__(self, N):
        self.p = range(N)
        self.sz = [1] * N

    def find(self, x):
        if self.p[x] != x:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x, y):
        xr = self.find(x)
        yr = self.find(y)
        self.p[xr] = yr
        self.sz[yr] += self.sz[xr]

    def size(self, x):
        return self.sz[self.find(x)]


class Solution(object):
    def minMalwareSpread(self, graph, initial):
#         dsu = DSU(len(graph))

#         for j, row in enumerate(graph):
#             for i in range(j):
#                 if row[i]:
#                     dsu.union(i, j)

#         count = collections.Counter(dsu.find(u) for u in initial)
#         ans = (-1, min(initial))
#         for node in initial:
#             root = dsu.find(node)
#             if count[root] == 1:  # unique color
#                 if dsu.size(root) > ans[0]:
#                     ans = dsu.size(root), node
#                 elif dsu.size(root) == ans[0] and node < ans[1]:
#                     ans = dsu.size(root), node

#         return ans[1]


# class Solution:
#     def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
#         # Number of nodes in the graph.
#         num_nodes = len(graph)
      
#         # Parent array for Disjoint Set Union (DSU).
#         parent = list(range(num_nodes))
      
#         # Size array to keep track of the size of each component.
#         component_size = [1] * num_nodes

#         # Function to find the representative (leader) of the component.
#         def find(x):
#             if parent[x] != x:
#                 parent[x] = find(parent[x])
#             return parent[x]

#         # Union operation to merge two components into one.
#         for i in range(num_nodes):
#             for j in range(i + 1, num_nodes):
#                 if graph[i][j] == 1:
#                     parent_i, parent_j = find(i), find(j)
#                     if parent_i != parent_j:
#                         parent[parent_i] = parent_j
#                         component_size[parent_j] += component_size[parent_i]

#         # Initialize to positive infinity for comparison purposes.
#         min_infected = float('inf')
      
#         # Result node which gets minimum malware spread.
#         result_node = initial[0]
      
#         # Sort the list to ensure that the smallest index is returned in case of ties.
#         initial.sort()
      
#         for i in range(len(initial)):
#             total_infected = 0
#             infected_set = set()
#             for j in range(len(initial)):
#                 if i == j:
#                     continue
#                 # Find the parent node of the j-th initially infected node.
#                 parent_node = find(initial[j])
#                 if parent_node in infected_set:
#                     continue
#                 # Add this parent node to the infected set and increment the total infected counter.
#                 infected_set.add(parent_node)
#                 total_infected += component_size[parent_node]
          
#             # Compare the number of infected nodes with the current minimum.
#             if min_infected > total_infected:
#                 min_infected = total_infected
#                 result_node = initial[i]
              
#         # Return the node that if removed, minimizes the spread of malware.
#         return result_node

        # https://leetcode.com/problems/minimize-malware-spread/editorial/
        
        # 1. Color each component.
        # colors[node] = the color of this node.
        N = len(graph)
        colors = {}
        c = 0

        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj and nei not in colors:
                    dfs(nei, color)

        for node in range(N):
            if node not in colors:
                dfs(node, c)
                c += 1

        # 2. Size of each color.
        # size[color] = number of occurrences of this color.
        size = collections.Counter(colors.values())

        # 3. Find unique colors.
        color_count = collections.Counter()
        for node in initial:
            color_count[colors[node]] += 1

        # 4. Answer
        ans = float('inf')
        for x in initial:
            c = colors[x]
            if color_count[c] == 1:
                if ans == float('inf'):
                    ans = x
                elif size[c] > size[colors[ans]]:
                    ans = x
                elif size[c] == size[colors[ans]] and x < ans:
                    ans = x

        return ans if ans < float('inf') else min(initial)        