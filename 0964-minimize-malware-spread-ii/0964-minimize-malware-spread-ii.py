class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # https://github.com/doocs/leetcode/tree/main/solution/0900-0999/0928.Minimize%20Malware%20Spread%20II
        def find(x):
            if p[x] != x:
                p[x] = find(p[x])
            return p[x]

        def union(a, b):
            pa, pb = find(a), find(b)
            if pa != pb:
                size[pb] += size[pa]
                p[pa] = pb

        n = len(graph)
        p = list(range(n))
        size = [1] * n
        clean = [True] * n
        for i in initial:
            clean[i] = False
        for i in range(n):
            if not clean[i]:
                continue
            for j in range(i + 1, n):
                if clean[j] and graph[i][j] == 1:
                    union(i, j)
        cnt = Counter()
        mp = {}
        for i in initial:
            s = {find(j) for j in range(n) if clean[j] and graph[i][j] == 1}
            for root in s:
                cnt[root] += 1
            mp[i] = s

        mx, ans = -1, 0
        for i, s in mp.items():
            t = sum(size[root] for root in s if cnt[root] == 1)
            if mx < t or mx == t and i < ans:
                mx, ans = t, i
        return ans
        
        # def find(x):
        #     if parent[x] != x:
        #         parent[x] = find(parent[x])
        #     return parent[x]

        # def union(a, b):
        #     root_a, root_b = find(a), find(b)
        #     if root_a != root_b:
        #         component_size[root_b] += component_size[root_a]
        #         parent[root_a] = root_b

        # n = len(graph)
        # parent = list(range(n))  # Initialize each node to be its own parent
        # component_size = [1] * n  # Keep track of the size of each component
        # is_clean = [True] * n  # Keep track if a node is not initially infected
        # for node in initial:
        #     is_clean[node] = False

        # # Union find to build up components of clean nodes
        # for i in range(n):
        #     if not is_clean[i]:
        #         continue
        #     for j in range(i + 1, n):
        #         if is_clean[j] and graph[i][j] == 1:
        #             union(i, j)

        # affected_component_count = Counter()  # Counts the number of initially infected nodes affecting the component
        # node_to_components = {}  # Maps an initially infected node to the components it affects
        # for node in initial:
        #     affected_components = {find(j) for j in range(n) if is_clean[j] and graph[node][j] == 1}
        #     for root in affected_components:
        #         affected_component_count[root] += 1
        #     node_to_components[node] = affected_components

        # # Initialize variables to find the optimal node to remove
        # max_reduction, result_node = -1, 0
        # for node, affected_components in node_to_components.items():
        #     # Calculate the total reduction in number of infected nodes 
        #     # if this 'node' is removed and is the only one affecting those components
        #     reduction = sum(component_size[root] for root in affected_components if affected_component_count[root] == 1)
          
        #     # Update the result if this 'node' provides a higher reduction of infected nodes
        #     # or if there is a tie, take the 'node' with the smaller index
        #     if max_reduction < reduction or (max_reduction == reduction and node < result_node):
        #         max_reduction, result_node = reduction, node

        # return result_node
